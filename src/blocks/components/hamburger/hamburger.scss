$hamburger-padding-x           : 0 !default;
$hamburger-padding-y           : 0 !default;
$hamburger-layer-width         : 14px !default;
$hamburger-layer-height        : 2px !default;
$hamburger-layer-spacing       : 2px !default;
$hamburger-layer-color         : $alpha !default;
$hamburger-background-color    : $light;
$hamburger-layer-border-radius : 50% !default;
$hamburger-hover-opacity       : 1 !default;
$hamburger-active-layer-color  : $hamburger-layer-color !default;
$hamburger-active-hover-opacity: $hamburger-hover-opacity !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter   : false !default;
$hamburger-hover-filter       : opacity(50%) !default;
$hamburger-active-hover-filter: $hamburger-hover-filter !default;

.hamburger {
    z-index: 300;
    overflow: visible;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0;
    border: 0;
    border-radius: $hamburger-layer-border-radius;
    box-sizing: content-box;
    padding: $hamburger-padding-y $hamburger-padding-x;
    min-width: 30px;
    min-height: 30px;
    max-width: 30px;
    max-height: 30px;
    cursor: pointer;

    transition-property: opacity, filter;
    transition-duration: .5s;
    transition-timing-function: linear;

    // Normalize (<button>)
    font: inherit;
    color: inherit;
    text-transform: none;
    background-color: $hamburger-background-color;
    line-height: 0;

    &:hover {
        .hamburger-inner, .hamburger-inner::before, .hamburger-inner::after {
            background-color: $alpha !important;
        }
        @if $hamburger-hover-use-filter == true {
            filter: $hamburger-hover-filter;
        }
        @else {
            opacity: $hamburger-hover-opacity;
        }
    }

    &.hamburger_active {
        &:hover {
            @if $hamburger-hover-use-filter == true {
                filter: $hamburger-active-hover-filter;
            }
            @else {
                opacity: $hamburger-active-hover-opacity;
            }
        }

        .hamburger-inner, .hamburger-inner::before, .hamburger-inner::after {
            background-color: $alpha;
        }
    }
}

.hamburger-box {
    display: inline-block;
    position: relative;
    width: $hamburger-layer-width;
    height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
}

.hamburger-inner {
    display: block;
    top: 50%;
    margin-top: 0;

    &, &::before, &::after {
        position: absolute;
        width: $hamburger-layer-width;
        height: $hamburger-layer-height;
        background-color: $hamburger-layer-color;
        transition-property: transform, background-color;
        transition-duration: 0.5s;
        transition-timing-function: ease;
    }

    &::before, &::after {
        content: "";
        display: block;
    }

    &::before {
        top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    }

    &::after {
        bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    }
}


.hamburger--slider {
    .hamburger-inner {
        top: $hamburger-layer-height / 2;

        &::before {
            top: $hamburger-layer-height + $hamburger-layer-spacing;
        }

        &::after {
            top: ($hamburger-layer-height * 2) + ($hamburger-layer-spacing * 2);
        }
    }

    &.hamburger_active {
        .hamburger-inner {
            $y-offset: $hamburger-layer-spacing + $hamburger-layer-height;

            transform: translate3d(0, $y-offset, 0) rotate(45deg);

            &::before {
                transform: rotate(-45deg) translate3d($hamburger-layer-width / -7, $hamburger-layer-spacing * -1, 0);
                opacity: 0;
            }

            &::after {
                transform: translate3d(0, $y-offset * -2, 0) rotate(-90deg);
            }
        }
    }
}
